@inject IJSRuntime JS
    
<style>
    .map{
        height: 100%;
        width: 100%;
    }

</style>
<div class="map" id="@MapId"></div>


    @code {

            //Properties
            [Parameter]
            public string APIKey { get; set; }

            [Parameter]
            public double StartLat { get; set; } = 41.739081;

            [Parameter]
            public double StartLon { get; set; } = -111.834756;

            [Parameter]
            public string MapId { get; set; }

            [Parameter]
            public object MapOptions { get; set; } = new { center = new MapLatLng { lat = 41.739081, lng = -111.834756 }, zoom = 15 };

        //Map Events
        [Parameter]
        public EventCallback<MapLatLng> Map_Click { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_DoubleClick { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_RightClick { get; set; }
        [Parameter]
        public EventCallback Map_BoundsChanged { get; set; }
        [Parameter]
        public EventCallback Map_CenterChanged { get; set; }
        [Parameter]
        public EventCallback Map_Drag { get; set; }
        [Parameter]
        public EventCallback Map_DragEnd { get; set; }
        [Parameter]
        public EventCallback Map_DragStart { get; set; }
        [Parameter]
        public EventCallback Map_HeadingChanged { get; set; }
        [Parameter]
        public EventCallback Map_Idle { get; set; }
        [Parameter]
        public EventCallback Map_MapTypeIdChanged { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_MouseMove { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_MouseOut { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_MouseOver { get; set; }
        [Parameter]
        public EventCallback Map_ProjectionChanged { get; set; }
        [Parameter]
        public EventCallback Map_Resize { get; set; }
        [Parameter]
        public EventCallback Map_ZoomChanged { get; set; }
        [Parameter]
        public EventCallback Map_TilesLoaded { get; set; }
        [Parameter]
        public EventCallback Map_TiltChanged { get; set; }
        //Marker Events
        [Parameter]
        public EventCallback Marker_AnimationChanged { get; set; }
        [Parameter]
        public EventCallback Marker_Click { get; set; }
        [Parameter]
        public EventCallback Marker_Clickable_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_Context_Menu { get; set; }
        [Parameter]
        public EventCallback Marker_Cursor_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_DBLClick { get; set; }
        [Parameter]
        public EventCallback Marker_Drag { get; set; }
        [Parameter]
        public EventCallback Marker_Drag_End { get; set; }
        [Parameter]
        public EventCallback Marker_Draggable_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_Drag_Start { get; set; }
        [Parameter]
        public EventCallback Marker_Flat_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_Icon_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_Mouse_Down { get; set; }
        [Parameter]
        public EventCallback Marker_Mouse_Out { get; set; }
        [Parameter]
        public EventCallback Marker_Mouse_Over { get; set; }
        [Parameter]
        public EventCallback Marker_Mouse_Up { get; set; }
        [Parameter]
        public EventCallback Marker_Position_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_Shape_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_Title_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_Visible_Changed { get; set; }
        [Parameter]
        public EventCallback Marker_Z_Index_Changed { get; set; }

        private List<MapMarker> Markers { get; set; }

        private DotNetObjectReference<Map>? objRef;

        //Methods

        private async void InitializeMap()
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initMap", MapId, objRef, MapOptions);
            SetMapEventListeners();
        }

        public MapMarker GetMarker(Guid Id)
        {
            return Markers.FirstOrDefault(m => m.Id == Id);
        }

        public async void AddMarker(MapMarker marker)
        {
            Markers.Add(marker);
            var options = marker.GetOptions();
            await JS.InvokeVoidAsync("addMapMarker", MapId, marker.Id, options);
        }

        //Map Events
        [JSInvokable]
        public async Task MapClicked(double lat, double lon)
        {
            await Map_Click.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapDoubleClicked(double lat, double lon)
        {
            await Map_DoubleClick.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapRightClicked(double lat, double lon)
        {
            await Map_RightClick.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapBoundsChanged()
        {
            await Map_BoundsChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapCenterChanged()
        {
            await Map_CenterChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapDrag()
        {
            await Map_Drag.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapDragEnd()
        {
            await Map_DragEnd.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapDragStart()
        {
            await Map_DragStart.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapIdle()
        {
            await Map_Idle.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapMapTypeIdChanged()
        {
            await Map_MapTypeIdChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapMouseMove(double lat, double lon)
        {
            await Map_MouseMove.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapMouseOut(double lat, double lon)
        {
            await Map_MouseOut.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapMouseOver(double lat, double lon)
        {
            await Map_MouseOver.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapProjectionChanged()
        {
            await Map_ProjectionChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapResize()
        {
            await Map_Resize.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapZoomChanged()
        {
            await Map_ZoomChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapTilesLoaded()
        {
            await Map_TilesLoaded.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapTiltChanged()
        {
            await Map_TiltChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapHeadingChanged()
        {
            await Map_HeadingChanged.InvokeAsync();
        }

        //Marker Events
        [JSInvokable]
        public async Task MarkerAnimationChanged(Guid MarkerId)
        {

        }
        [JSInvokable]
        public async Task MarkerClick(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerClickableChanged(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerContextMenu(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerCursorChanged(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerDoubleClick(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerDrag(Guid MarkerId)
        {

        }
        [JSInvokable]
        public async Task MarkerDragEnd(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerDraggableChanged(Guid MarkerId)
        {

        }
        [JSInvokable]
        public async Task MarkerDragStart(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerFlatChanged(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerIconChanged(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerMouseDown(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerMouseOut(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerMouseOver(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerMouseUp(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerPositionChanged(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerShapeChanged(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerTitleChanged(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerVisibleChanged(Guid MarkerId)
        {

        }

        [JSInvokable]
        public async Task MarkerZIndexChanged(Guid MarkerId)
        {

        }

        private async void SetMapEventListeners()
        {
            var result = await JS.InvokeAsync<string>("setMapEventListeners", MapId);
        }

        protected async override Task OnInitializedAsync()
        {
            base.OnInitializedAsync();

            await Task.Delay(1);
            InitializeMap();
        }
    }
