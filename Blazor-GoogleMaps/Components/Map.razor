@inject IJSRuntime JS
    
<style>
    .map{
        height: 100%;
        width: 100%;
    }

</style>
<div class="map" id="@MapId"></div>


    @code {

        //Properties
        [Parameter]
        public string APIKey { get; set; }

        [Parameter]
        public double StartLat { get; set; } = 41.739081;

        [Parameter]
        public double StartLon { get; set; } = -111.834756;

        [Parameter]
        public string MapId { get; set; }

        [Parameter]
        public object MapOptions { get; set; } = new { center = new MapLatLng { lat = 41.739081, lng = -111.834756 }, zoom = 15 };

        //
        //Map Events
        //
        [Parameter]
        public EventCallback<MapLatLng> Map_Click { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_DoubleClick { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_RightClick { get; set; }
        [Parameter]
        public EventCallback Map_BoundsChanged { get; set; }
        [Parameter]
        public EventCallback Map_CenterChanged { get; set; }
        [Parameter]
        public EventCallback Map_Drag { get; set; }
        [Parameter]
        public EventCallback Map_DragEnd { get; set; }
        [Parameter]
        public EventCallback Map_DragStart { get; set; }
        [Parameter]
        public EventCallback Map_HeadingChanged { get; set; }
        [Parameter]
        public EventCallback Map_Idle { get; set; }
        [Parameter]
        public EventCallback Map_MapTypeIdChanged { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_MouseMove { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_MouseOut { get; set; }
        [Parameter]
        public EventCallback<MapLatLng> Map_MouseOver { get; set; }
        [Parameter]
        public EventCallback Map_ProjectionChanged { get; set; }
        [Parameter]
        public EventCallback Map_Resize { get; set; }
        [Parameter]
        public EventCallback Map_ZoomChanged { get; set; }
        [Parameter]
        public EventCallback Map_TilesLoaded { get; set; }
        [Parameter]
        public EventCallback Map_TiltChanged { get; set; }
        //
        //Marker Events
        //
        [Parameter]
        public EventCallback<MapMarker> Marker_AnimationChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_Click { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_ClickableChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_ContextMenu { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_CursorChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_DBLClick { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_Drag { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_DragEnd { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_DraggableChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_DragStart { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_FlatChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_IconChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_MouseDown { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_MouseOut { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_MouseOver { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_MouseUp { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_PositionChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_ShapeChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_TitleChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_VisibleChanged { get; set; }
        [Parameter]
        public EventCallback<MapMarker> Marker_ZIndexChanged { get; set; }
        //
        //Polygon Events
        //
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_Click { get; set; }       
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_ContextMenu { get; set; }        
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_DBLClick { get; set; }
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_Drag { get; set; }
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_DragEnd { get; set; }        
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_DragStart { get; set; }
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_MouseDown { get; set; }
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_MouseMove { get; set; }
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_MouseOut { get; set; }
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_MouseOver { get; set; }
        [Parameter]
        public EventCallback<MapPolyMouseEvent> Polygon_MouseUp { get; set; }



        private List<MapMarker> Markers { get; set; } = new();
        private List<MapPolygon> Polygons { get; set; } = new();

        private DotNetObjectReference<Map>? objRef;

        //Methods

        private async void InitializeMap()
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initMap", MapId, objRef, MapOptions);
            SetMapEventListeners();
        }

        public MapMarker GetMarker(Guid Id)
        {
            return Markers.FirstOrDefault(m => m.Id == Id);
        }

        public async void AddMarker(MapMarker marker)
        {
            Markers.Add(marker);
            await JS.InvokeVoidAsync("addMapMarker", MapId, marker);
        }

        public async void UpdateMarker(Guid Id, MapMarkerOptions options)
        {
            await JS.InvokeVoidAsync("updateMapMarker", Id, options);
        }

        public MapPolygon GetPolygon(Guid Id)
        {
            return Polygons.FirstOrDefault(p => p.Id == Id);
        }

        public async void AddPolygon(MapPolygon polygon)
        {
            Polygons.Add(polygon);
            await JS.InvokeVoidAsync("addMapPolygon", MapId, polygon);
        }

        public async void UpdatePolygon(Guid Id, MapPolygonOptions options)
        {
            await JS.InvokeVoidAsync("updateMapPolygon", Id, options);
        }

        //Map Events
        [JSInvokable]
        public async Task MapClicked(double lat, double lon)
        {
            await Map_Click.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapDoubleClicked(double lat, double lon)
        {
            await Map_DoubleClick.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapRightClicked(double lat, double lon)
        {
            await Map_RightClick.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapBoundsChanged()
        {
            await Map_BoundsChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapCenterChanged()
        {
            await Map_CenterChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapDrag()
        {
            await Map_Drag.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapDragEnd()
        {
            await Map_DragEnd.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapDragStart()
        {
            await Map_DragStart.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapIdle()
        {
            await Map_Idle.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapMapTypeIdChanged()
        {
            await Map_MapTypeIdChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapMouseMove(double lat, double lon)
        {
            await Map_MouseMove.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapMouseOut(double lat, double lon)
        {
            await Map_MouseOut.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapMouseOver(double lat, double lon)
        {
            await Map_MouseOver.InvokeAsync(new MapLatLng() { lat = lat, lng = lon });
        }

        [JSInvokable]
        public async Task MapProjectionChanged()
        {
            await Map_ProjectionChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapResize()
        {
            await Map_Resize.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapZoomChanged()
        {
            await Map_ZoomChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapTilesLoaded()
        {
            await Map_TilesLoaded.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapTiltChanged()
        {
            await Map_TiltChanged.InvokeAsync();
        }

        [JSInvokable]
        public async Task MapHeadingChanged()
        {
            await Map_HeadingChanged.InvokeAsync();
        }

        //Marker Events
        [JSInvokable]
        public async Task MarkerAnimationChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_AnimationChanged.InvokeAsync(marker);
        }
        [JSInvokable]
        public async Task MarkerClick(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_Click.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerClickableChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_ClickableChanged.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerContextMenu(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_ContextMenu.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerCursorChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_CursorChanged.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerDoubleClick(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_DBLClick.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerDrag(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_Drag.InvokeAsync(marker);
        }
        [JSInvokable]
        public async Task MarkerDragEnd(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_DragEnd.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerDraggableChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_DraggableChanged.InvokeAsync(marker);
        }
        [JSInvokable]
        public async Task MarkerDragStart(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_DragStart.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerFlatChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_FlatChanged.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerIconChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_IconChanged.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerMouseDown(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_MouseDown.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerMouseOut(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_MouseOut.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerMouseOver(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_MouseOver.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerMouseUp(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_MouseUp.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerPositionChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_PositionChanged.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerShapeChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_ShapeChanged.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerTitleChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_TitleChanged.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerVisibleChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_VisibleChanged.InvokeAsync(marker);
        }

        [JSInvokable]
        public async Task MarkerZIndexChanged(Guid MarkerId)
        {
            var marker = Markers.FirstOrDefault(m => m.Id == MarkerId);
            await Marker_ZIndexChanged.InvokeAsync(marker);
        }

        //
        //Polygon Events
        //
        [JSInvokable]
        public async Task PolygonClick(MapPolyMouseEvent args)
        {
            await Polygon_Click.InvokeAsync(args);
        }

        [JSInvokable]
        public async Task PolygonContextMenu(MapPolyMouseEvent args)
        {
            await Polygon_ContextMenu.InvokeAsync(args);
        }

        [JSInvokable]
        public async Task PolygonDoubleClick(MapPolyMouseEvent args)
        {
            await Polygon_DBLClick.InvokeAsync(args);
        }

        [JSInvokable]
        public async Task PolygonDrag(MapPolyMouseEvent args)
        {
            await Polygon_Drag.InvokeAsync(args);
        }
        [JSInvokable]
        public async Task PolygonDragEnd(MapPolyMouseEvent args)
        {
            await Polygon_DragEnd.InvokeAsync(args);
        }

        [JSInvokable]
        public async Task PolygonDragStart(MapPolyMouseEvent args)
        {
            await Polygon_DragStart.InvokeAsync(args);
        }

        [JSInvokable]
        public async Task PolygonMouseMove(MapPolyMouseEvent args)
        {
            await Polygon_MouseDown.InvokeAsync(args);
        }
        
        [JSInvokable]
        public async Task PolygonMouseDown(MapPolyMouseEvent args)
        {
            await Polygon_MouseDown.InvokeAsync(args);
        }

        [JSInvokable]
        public async Task PolygonMouseOut(MapPolyMouseEvent args)
        {
            await Polygon_MouseOut.InvokeAsync(args);
        }

        [JSInvokable]
        public async Task PolygonMouseOver(MapPolyMouseEvent args)
        {
            await Polygon_MouseOver.InvokeAsync(args);
        }

        [JSInvokable]
        public async Task PolygonMouseUp(MapPolyMouseEvent args)
        {
            await Polygon_MouseUp.InvokeAsync(args);
        }

        private async void SetMapEventListeners()
        {
            var result = await JS.InvokeAsync<string>("setMapEventListeners", MapId);
        }

        protected async override Task OnInitializedAsync()
        {
            base.OnInitializedAsync();

            await Task.Delay(1);
            InitializeMap();
        }
    }
